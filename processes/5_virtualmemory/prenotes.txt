Historically, a C program has been composed of the following pieces:

	Text segment: 
		consisting of the machine instructions that the CPU executes
		Usually, the text segment is sharable so that only a single copy needs to be in memory for frequently executed programs, such as text editors, the C compiler,the shells, and so on.
		the text segment is often read-only, to prevent a program from accidentally modifying its instructions

	Initialized data segment: 
		usually called simply the data segment
		containing variables that are specifically initialized in the program
		int maxcount = 99; appearing outside any function causes this variable to be stored in the initialized data segment with its initial value.

	Uninitialized data segment:
		often called the ‘‘bss’’ segment, named after an ancient assembler operator that stood for ‘‘block started by symbol"

		Data in this segment is initialized by the kernel to arithmetic 0 or null pointers before the program starts executing

		long sum[1000]; appearing outside any function causes this variable to be stored in the uninitialized data segment.

	Stack:
		automatic variables are stored, along with information that is saved each time a function is called

		Each time a function is called, the address of where to return to and certain information about the caller’s environment, such as some of the machine registers, are saved on the stack.

	Heap:

		dynamic memory allocation usually takes place
	
		Historically, the heap has been located between the uninitialized data and the stack

	With Linux on a 32-bit Intel x86 processor, the text segment starts at location 0x08048000, and the bottom of the stack starts just below 0xC0000000.

	high address|-------------------| command-line arguments
   				|-------------------| and environment variables
				|        stack      |
				|-------------------|
				|					|
				|					|
				|					|
				|-------------------|
				|		heap		|
				|-------------------|
				|uninitialized data | initialized to
				|		(bss)		| zero by exec
				|-------------------|
				| initialized data  | read from
				|-------------------| program file 
				|		text		| by exec
	low address |-------------------|
			Typical memory arrangement


The size(1) command reports the sizes (in bytes) of the text, data, and bss segments.


		
